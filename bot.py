import logging
import asyncio
import string
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ErrorEvent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô!)
TOKEN = "YOUR_BOT_TOKEN"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–∏–º–≤–æ–ª—å–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
LETTERS_EN_UPPER = string.ascii_uppercase
LETTERS_EN_LOWER = string.ascii_lowercase
LETTERS_RU_UPPER = '–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'
LETTERS_RU_LOWER = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
DIGITS = string.digits
SYMBOLS = '!@#$%^&*()_+-=[]{}|;:,.<>?'

class PasswordState(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"""
    language = State()
    case = State()
    parameters = State()
    length = State()

def generate_password(length: int, use_digits: bool, use_symbols: bool, letters: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if length < 1:
        return ""
    
    chars = letters
    if use_digits:
        chars += DIGITS
    if use_symbols:
        chars += SYMBOLS
    
    password = []
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    password.append(random.choice(letters))
    if use_digits:
        password.append(random.choice(DIGITS))
    if use_symbols:
        password.append(random.choice(SYMBOLS))
    
    # –î–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    remaining = length - len(password)
    if remaining > 0:
        password += [random.choice(chars) for _ in range(remaining)]
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    random.shuffle(password)
    return ''.join(password)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await message.answer(
            "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /genpass <–¥–ª–∏–Ω–∞> —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate [–¥–ª–∏–Ω–∞] –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}", exc_info=True)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    try:
        await message.answer(
            "üõ† –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "/genpass <–¥–ª–∏–Ω–∞> - —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (6-50 —Å–∏–º–≤–æ–ª–æ–≤)\n"
            "/generate [–¥–ª–∏–Ω–∞] - –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12 —Å–∏–º–≤–æ–ª–æ–≤)\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n/genpass 12\n/generate 15"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_help: {e}", exc_info=True)

@dp.message(Command("generate"))
async def cmd_generate(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        args = message.text.split()
        length = 12  # –î–ª–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if len(args) >= 2:
            if not args[1].isdigit():
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 6 –¥–æ 50.")
                return
            
            length = int(args[1])
            if not (6 <= length <= 50):
                await message.answer("‚ùå –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 6 –¥–æ 50.")
                return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        letters = LETTERS_EN_LOWER + LETTERS_EN_UPPER  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –æ–±–æ–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        use_digits = True
        use_symbols = True
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        password = generate_password(
            length=length,
            use_digits=use_digits,
            use_symbols=use_symbols,
            letters=letters
        )
        
        await message.answer(
            f"üîí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å ({length} —Å–∏–º–≤–æ–ª–æ–≤):\n<code>{password}</code>",
            parse_mode="HTML"
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_generate: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("genpass"))
async def cmd_genpass(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        args = message.text.split()
        if len(args) < 2:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è")
        
        if not args[1].isdigit():
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏–Ω—ã")
        
        length = int(args[1])
        if not (6 <= length <= 50):
            raise ValueError("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 6 –¥–æ 50")
        
        await state.update_data(length=length)
        await message.answer(
            "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n"
            "1 - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
            "2 - –†—É—Å—Å–∫–∏–π"
        )
        await state.set_state(PasswordState.language)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_genpass: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "/genpass <–¥–ª–∏–Ω–∞>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /genpass 12 (–¥–ª–∏–Ω–∞ –æ—Ç 6 –¥–æ 50)"
        )
        await state.clear()

@dp.message(PasswordState.language)
async def process_language(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    try:
        user_input = message.text.strip()
        if user_input not in ('1', '2'):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞")
        
        if user_input == '1':
            letters = LETTERS_EN_LOWER + LETTERS_EN_UPPER
            lang = 'en'
        else:
            letters = LETTERS_RU_LOWER + LETTERS_RU_UPPER
            lang = 'ru'
        
        await state.update_data(language=lang, letters=letters)
        await message.answer(
            "üî§ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä:\n"
            "1 - –¢–æ–ª—å–∫–æ –Ω–∏–∂–Ω–∏–π\n"
            "2 - –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π\n"
            "3 - –û–±–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"
        )
        await state.set_state(PasswordState.case)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_language: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "1 - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
            "2 - –†—É—Å—Å–∫–∏–π"
        )

@dp.message(PasswordState.case)
async def process_case(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    try:
        user_input = message.text.strip()
        if user_input not in ('1', '2', '3'):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞")
        
        data = await state.get_data()
        base_letters = data['letters']
        
        if user_input == '1':
            letters = base_letters.lower()
        elif user_input == '2':
            letters = base_letters.upper()
        else:
            letters = base_letters  # –û–±–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã
        
        await state.update_data(letters=letters)
        await message.answer(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n"
            "1 - –¶–∏—Ñ—Ä—ã (0-9)\n"
            "2 - –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (!@# –∏ –¥—Ä.)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 1 2 - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
        )
        await state.set_state(PasswordState.parameters)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_case: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "1 - –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä\n"
            "2 - –í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä\n"
            "3 - –û–±–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"
        )

@dp.message(PasswordState.parameters)
async def process_parameters(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª—è"""
    try:
        data = await state.get_data()
        length = data['length']
        letters = data['letters']
        
        user_input = message.text.strip()
        if not user_input:
            raise ValueError("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        options = set(user_input.split())
        if not options.issubset({'1', '2'}):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        use_digits = '1' in options
        use_symbols = '2' in options
        
        password = generate_password(
            length=length,
            use_digits=use_digits,
            use_symbols=use_symbols,
            letters=letters
        )
        
        response = (
            f"üîí –í–∞—à –ø–∞—Ä–æ–ª—å:\n<code>{password}</code>\n\n"
            f"üìè –î–ª–∏–Ω–∞: {length}\n"
            f"üî¢ –¶–∏—Ñ—Ä—ã: {'–î–∞' if use_digits else '–ù–µ—Ç'}\n"
            f"‚ö° –°–∏–º–≤–æ–ª—ã: {'–î–∞' if use_symbols else '–ù–µ—Ç'}\n"
            f"üåê –Ø–∑—ã–∫: {'–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' if data.get('language') == 'en' else '–†—É—Å—Å–∫–∏–π'}"
        )
        
        await message.answer(response, parse_mode="HTML")
        await state.clear()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_parameters: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
            "1 - –¶–∏—Ñ—Ä—ã\n2 - –°–∏–º–≤–æ–ª—ã\n\n–ü—Ä–∏–º–µ—Ä: 1 2"
        )
        await state.set_state(PasswordState.parameters)

@dp.errors()
async def global_error_handler(event: ErrorEvent):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.critical("–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: %s", event.exception, exc_info=True)
    await event.update.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())