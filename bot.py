"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
"""

import logging
import asyncio
import string
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô!)
TOKEN = "7809682956:AAHf7F0Huo4I4dGlLYV4vMjh5gwoHnUqFOM"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–∏–º–≤–æ–ª—å–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
LETTERS_EN_UPPER = string.ascii_uppercase
LETTERS_EN_LOWER = string.ascii_lowercase
LETTERS_RU_UPPER = '–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'
LETTERS_RU_LOWER = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
DIGITS = string.digits
SYMBOLS = '!@#$%^&*()_+-=[]{}|;:,.<>?'

class PasswordState(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"""
    language = State()
    case = State()
    parameters = State()
    length = State()

def generate_password(length: int, use_digits: bool, use_symbols: bool, letters: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if length < 1:
        return ""
    
    chars = letters
    if use_digits:
        chars += DIGITS
    if use_symbols:
        chars += SYMBOLS
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    password = []
    password.append(random.choice(letters))
    if use_digits:
        password.append(random.choice(DIGITS))
    if use_symbols:
        password.append(random.choice(SYMBOLS))
    
    # –î–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    remaining = length - len(password)
    if remaining > 0:
        password += [random.choice(chars) for _ in range(remaining)]
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    random.shuffle(password)
    return ''.join(password)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    await message.answer(
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /genpass <–¥–ª–∏–Ω–∞>, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.\n"
        "–ò–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    await message.answer(
        "üõ† –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "/genpass <–¥–ª–∏–Ω–∞> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /genpass
@dp.message(Command("genpass"))
async def cmd_genpass(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–ª–∏–Ω—ã"""
    args = message.text.split()
    
    if len(args) > 1 and args[1].isdigit():
        length = int(args[1])
        if 6 <= length <= 50:
            await state.update_data(length=length)
            await message.answer(
                "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏–ª–∏ 2 –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ):"
            )
            await state.set_state(PasswordState.language)
        else:
            await message.answer("‚ö†Ô∏è –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 6 –¥–æ 50. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /genpass 12).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message(PasswordState.language)
async def process_language(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    if message.text == '1':
        await state.update_data(language='en')
        await message.answer(
            "üî§ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ, 2 –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ, 3 –¥–ª—è –æ–±–æ–∏—Ö):"
        )
        await state.update_data(letters=LETTERS_EN_LOWER + LETTERS_EN_UPPER)
    elif message.text == '2':
        await state.update_data(language='ru')
        await message.answer(
            "üî§ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ, 2 –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ, 3 –¥–ª—è –æ–±–æ–∏—Ö):"
        )
        await state.update_data(letters=LETTERS_RU_LOWER + LETTERS_RU_UPPER)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏–ª–∏ 2 –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ.")
        return
    
    await state.set_state(PasswordState.case)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
@dp.message(PasswordState.case)
async def process_case(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    data = await state.get_data()
    letters = data['letters']
    
    if message.text == '1':
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        letters = letters.lower()
    elif message.text == '2':
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        letters = letters.upper()
    elif message.text == '3':
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        letters = data['letters']
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1, 2 –∏–ª–∏ 3.")
        return

    await state.update_data(letters=letters)
    await message.answer(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n\n"
        "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã (0-9)\n"
        "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (!@# –∏ –¥—Ä.)\n\n"
        "–ü—Ä–∏–º–µ—Ä: 1 2 - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    )
    await state.set_state(PasswordState.parameters)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª—è
@dp.message(PasswordState.parameters)
async def process_parameters(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª—è"""
    data = await state.get_data()
    length = data['length']
    letters = data['letters']
    
    options = message.text.split()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
    if len(options) == 1:
        try:
            option = int(options[0])
            if option == 1:
                use_digits = True
                use_symbols = False
            elif option == 2:
                use_digits = False
                use_symbols = True
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2.")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 2")
            return
    else:
        try:
            options = list(map(int, options))
            use_digits = 1 in options
            use_symbols = 2 in options
            
            if not any([use_digits, use_symbols]):
                await message.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (1 –∏–ª–∏ 2)")
                return
        except (ValueError, TypeError):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 2")
            return

    password = generate_password(
        length=length,
        use_digits=use_digits,
        use_symbols=use_symbols,
        letters=letters
    )
    
    await message.answer(
        f"üîí –í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n\n"
        f"<code>{password}</code>\n\n"
        f"üìè –î–ª–∏–Ω–∞: {length}\n"
        f"üî¢ –¶–∏—Ñ—Ä—ã: {'–î–∞' if use_digits else '–ù–µ—Ç'}\n"
        f"‚ö° –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: {'–î–∞' if use_symbols else '–ù–µ—Ç'}\n"
        f"üåê –Ø–∑—ã–∫: {'–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' if data['language'] == 'en' else '–†—É—Å—Å–∫–∏–π'}",
        parse_mode="HTML"
    )
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())