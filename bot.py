"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —ç—Ö–æ-–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ aiogram, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å
—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, —Ç–µ–∫—Å—Ç–æ–º, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–∏—Ñ–∫–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç.
"""

import os
import tempfile
import logging
import asyncio

import speech_recognition as sr
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ContentType
from pydub import AudioSegment
from pydub.utils import which

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô!)
TOKEN = "7809682956:AAHf7F0Huo4I4dGlLYV4vMjh5gwoHnUqFOM"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ffmpeg
if not which("ffmpeg"):
    raise RuntimeError("FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/")

async def convert_audio(input_path: str, output_format: str = "wav") -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ WAV —Ñ–æ—Ä–º–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."""
    output_path = tempfile.mktemp(suffix=f".{output_format}")
    audio = AudioSegment.from_file(input_path)
    audio.export(output_path, format=output_format)
    return output_path

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    await message.answer(
        "üëã –Ø —ç—Ö–æ-–±–æ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "—Ç–µ–∫—Å—Ç, —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –≥–∏—Ñ–∫—É, –∏ —è –ø–æ–≤—Ç–æ—Ä—é –∏—Ö. –ì–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ —Ç–∞–∫–∂–µ "
        "–ø—Ä–µ–æ–±—Ä–∞–∑—É—é –≤ —Ç–µ–∫—Å—Ç."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ
@dp.message(lambda m: m.voice or m.audio)
async def handle_audio(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –≤–æ–∑–≤—Ä–∞—â–∞—è —ç—Ö–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ
    if message.voice:
        await message.answer_voice(message.voice.file_id)
    elif message.audio:
        await message.answer_audio(message.audio.file_id)
    
    download_path = None
    wav_path = None

    try:
        file = message.voice or message.audio
        file_info = await bot.get_file(file.file_id)
        download_path = f"temp_{file.file_id}"
        await bot.download_file(file_info.file_path, download_path)

        wav_path = await convert_audio(download_path)
        
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language='ru-RU')
            await message.answer(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")

    except sr.UnknownValueError:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except (sr.RequestError, OSError) as e:
        logging.error("–û—à–∏–±–∫–∞: %s", e)
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
    finally:
        for path in [download_path, wav_path]:
            if path and os.path.exists(path):
                os.remove(path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@dp.message(lambda m: m.content_type == ContentType.STICKER)
async def handle_sticker(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä."""
    await message.answer_sticker(message.sticker.file_id)

@dp.message(lambda m: m.content_type == ContentType.TEXT)
async def echo_text(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    await message.answer(message.text)

@dp.message(lambda m: m.content_type == ContentType.PHOTO)
async def handle_photo(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ."""
    await message.answer_photo(message.photo[-1].file_id)

@dp.message(lambda m: m.content_type == ContentType.VIDEO)
async def handle_video(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ."""
    await message.answer_video(message.video.file_id)

@dp.message(lambda m: m.content_type == ContentType.ANIMATION)
async def handle_animation(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é (–≥–∏—Ñ–∫—É)."""
    await message.answer_animation(message.animation.file_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())